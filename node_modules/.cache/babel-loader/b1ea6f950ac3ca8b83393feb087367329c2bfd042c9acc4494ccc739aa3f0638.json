{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"ageChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_createElementVNode","_hoisted_1"],"sources":["C:\\Users\\Usuário\\Documents\\teste-pratico\\front-end-teste\\src\\components\\chards\\AgeChard.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <canvas ref=\"ageChart\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { defineComponent } from 'vue';\r\n  import Chart from 'chart.js/auto';\r\n  \r\n  export default defineComponent({\r\n    name: 'AgeChart',\r\n    props: {\r\n      users: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n      splitBySex: {\r\n        type: Boolean,\r\n        required: true,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        chart: null,\r\n      };\r\n    },\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        this.renderChart();\r\n      });\r\n    },\r\n    watch: {\r\n      users() {\r\n        this.updateChart();\r\n      },\r\n      splitBySex() {\r\n        this.updateChart();\r\n      },\r\n    },\r\n    methods: {\r\n      updateChart() {\r\n        if (this.chart) {\r\n          this.chart.destroy();\r\n          this.chart = null;\r\n        }\r\n        this.$nextTick(() => {\r\n          this.renderChart();\r\n        });\r\n      },\r\n      renderChart() {\r\n        const ctx = this.$refs.ageChart?.getContext('2d');\r\n        if (!ctx) return;\r\n  \r\n        const createChart = (labels, data, label, backgroundColors) => {\r\n          this.chart = new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n              labels,\r\n              datasets: [{\r\n                label,\r\n                data,\r\n                backgroundColor: backgroundColors,\r\n                borderWidth: 1,\r\n              }],\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            },\r\n          });\r\n        };\r\n  \r\n        if (this.splitBySex) {\r\n          const maleUsers = this.users.filter(user => user.implementar.sex === 'M');\r\n          const femaleUsers = this.users.filter(user => user.implementar.sex === 'F');\r\n  \r\n          const totalMaleAge = maleUsers.reduce((sum, user) => sum + parseInt(user.implementar.age), 0);\r\n          const totalFemaleAge = femaleUsers.reduce((sum, user) => sum + parseInt(user.implementar.age), 0);\r\n  \r\n          const averageMaleAge = maleUsers.length ? totalMaleAge / maleUsers.length : 0;\r\n          const averageFemaleAge = femaleUsers.length ? totalFemaleAge / femaleUsers.length : 0;\r\n  \r\n          createChart(['Masculino', 'Feminino'], [averageMaleAge, averageFemaleAge], 'Idade Média dos Usuários por Sexo', ['#007bff', '#dc3545']);\r\n        } else {\r\n          const totalAge = this.users.reduce((sum, user) => sum + parseInt(user.implementar.age), 0);\r\n          const averageAge = totalAge / this.users.length;\r\n  \r\n          createChart(['Idade Média'], [averageAge], 'Idade Média dos Usuários', ['#007bff']);\r\n        }\r\n      },\r\n    },\r\n  });\r\n  </script>\r\n  "],"mappings":";;EAEcA,GAAG,EAAC;AAAU;;uBADxBC,mBAAA,CAEM,cADJC,mBAAA,CAAgC,UAAhCC,UAAgC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}