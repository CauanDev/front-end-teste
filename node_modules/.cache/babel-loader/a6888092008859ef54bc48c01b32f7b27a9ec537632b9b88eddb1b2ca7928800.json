{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'CountServices',\n  props: {\n    users: {\n      type: Array,\n      required: true\n    }\n  },\n  watch: {\n    users() {\n      this.createChart();\n    }\n  },\n  mounted() {\n    this.createChart();\n    console.log(this.users);\n  },\n  methods: {\n    createChart() {\n      const dates = this.users.map(item => item.date_service);\n\n      // Contar a quantidade de revisões por data\n      const revisionCountsByDate = dates.reduce((acc, date) => {\n        acc[date] = (acc[date] || 0) + 1;\n        return acc;\n      }, {});\n\n      // Preparar os rótulos e os dados para o gráfico\n      const labels = Object.keys(revisionCountsByDate);\n      const data = Object.values(revisionCountsByDate);\n      const ctx = this.$refs.userChart.getContext('2d');\n      if (this.chart) {\n        this.chart.data.labels = labels;\n        this.chart.data.datasets[0].data = data;\n        this.chart.update();\n      } else {\n        // Criar um novo gráfico\n        this.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Número de Revisões',\n              data: data,\n              backgroundColor: 'rgba(75, 192, 192, 0.8)',\n              borderColor: 'rgba(75, 192, 192)',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","name","props","users","type","Array","required","watch","createChart","mounted","console","log","methods","dates","map","item","date_service","revisionCountsByDate","reduce","acc","date","labels","Object","keys","data","values","ctx","$refs","userChart","getContext","chart","datasets","update","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero"],"sources":["C:\\Users\\Usuário\\Documents\\teste-pratico\\front-end-teste\\src\\components\\chards\\CountServices.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <canvas ref=\"userChart\"></canvas>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  name: 'CountServices',\r\n  props: {\r\n    users: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n  },\r\n  watch: {\r\n    users() {\r\n      this.createChart();\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createChart();\r\n    console.log(this.users)\r\n  },\r\n  methods: {\r\n    createChart() {\r\n      const dates = this.users.map(item => item.date_service);\r\n\r\n      // Contar a quantidade de revisões por data\r\n      const revisionCountsByDate = dates.reduce((acc, date) => {\r\n        acc[date] = (acc[date] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Preparar os rótulos e os dados para o gráfico\r\n      const labels = Object.keys(revisionCountsByDate);\r\n      const data = Object.values(revisionCountsByDate);\r\n\r\n      const ctx = this.$refs.userChart.getContext('2d');\r\n\r\n      if (this.chart) {\r\n\r\n        this.chart.data.labels = labels;\r\n        this.chart.data.datasets[0].data = data;\r\n        this.chart.update(); \r\n      } else {\r\n        // Criar um novo gráfico\r\n        this.chart = new Chart(ctx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [{\r\n              label: 'Número de Revisões',\r\n              data: data,\r\n              backgroundColor: 'rgba(75, 192, 192, 0.8)',\r\n              borderColor: 'rgba(75, 192, 192)',\r\n              borderWidth: 2\r\n            }]\r\n          },\r\n          options: {\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n  "],"mappings":"AAMA,SAASA,KAAK,EAAEC,aAAY,QAAS,UAAU;AAE/CD,KAAK,CAACE,QAAQ,CAAC,GAAGD,aAAa,CAAC;AAEhC,eAAe;EACbE,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAK,EAAE;IACLJ,KAAKA,CAAA,EAAG;MACN,IAAI,CAACK,WAAW,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACD,WAAW,CAAC,CAAC;IAClBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,KAAK;EACxB,CAAC;EACDS,OAAO,EAAE;IACPJ,WAAWA,CAAA,EAAG;MACZ,MAAMK,KAAI,GAAI,IAAI,CAACV,KAAK,CAACW,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,YAAY,CAAC;;MAEvD;MACA,MAAMC,oBAAmB,GAAIJ,KAAK,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;QACvDD,GAAG,CAACC,IAAI,IAAI,CAACD,GAAG,CAACC,IAAI,KAAK,CAAC,IAAI,CAAC;QAChC,OAAOD,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEN;MACA,MAAME,MAAK,GAAIC,MAAM,CAACC,IAAI,CAACN,oBAAoB,CAAC;MAChD,MAAMO,IAAG,GAAIF,MAAM,CAACG,MAAM,CAACR,oBAAoB,CAAC;MAEhD,MAAMS,GAAE,GAAI,IAAI,CAACC,KAAK,CAACC,SAAS,CAACC,UAAU,CAAC,IAAI,CAAC;MAEjD,IAAI,IAAI,CAACC,KAAK,EAAE;QAEd,IAAI,CAACA,KAAK,CAACN,IAAI,CAACH,MAAK,GAAIA,MAAM;QAC/B,IAAI,CAACS,KAAK,CAACN,IAAI,CAACO,QAAQ,CAAC,CAAC,CAAC,CAACP,IAAG,GAAIA,IAAI;QACvC,IAAI,CAACM,KAAK,CAACE,MAAM,CAAC,CAAC;MACrB,OAAO;QACL;QACA,IAAI,CAACF,KAAI,GAAI,IAAIhC,KAAK,CAAC4B,GAAG,EAAE;UAC1BtB,IAAI,EAAE,KAAK;UACXoB,IAAI,EAAE;YACJH,MAAM,EAAEA,MAAM;YACdU,QAAQ,EAAE,CAAC;cACTE,KAAK,EAAE,oBAAoB;cAC3BT,IAAI,EAAEA,IAAI;cACVU,eAAe,EAAE,yBAAyB;cAC1CC,WAAW,EAAE,oBAAoB;cACjCC,WAAW,EAAE;YACf,CAAC;UACH,CAAC;UACDC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,WAAW,EAAE;cACf;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}