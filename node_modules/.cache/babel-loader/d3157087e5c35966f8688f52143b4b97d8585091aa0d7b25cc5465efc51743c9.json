{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"userChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_createElementVNode","_hoisted_1"],"sources":["C:\\Users\\Usu√°rio\\Documents\\teste-pratico\\front-end-teste\\src\\components\\chards\\CountChardSplit.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <canvas ref=\"userChart\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { Chart, registerables } from 'chart.js';\r\n  \r\n  Chart.register(...registerables);\r\n  \r\n  export default {\r\n    name: 'CountChardSplit',\r\n    props: {\r\n      users: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        chart: null,\r\n      };\r\n    },\r\n    watch: {\r\n      users() {\r\n        if (this.chart) {\r\n          this.chart.destroy();\r\n        }\r\n        this.createChart();\r\n      }\r\n    },\r\n    mounted() {\r\n      this.createChart();\r\n    },\r\n    methods: {\r\n      createChart() {\r\n        const maleUsers = this.users.filter(user => user.implementar.sex === 'M');\r\n        const femaleUsers = this.users.filter(user => user.implementar.sex === 'F');\r\n  \r\n        const maleDates = maleUsers.map(user => user.created_at);\r\n        const femaleDates = femaleUsers.map(user => user.created_at);\r\n  \r\n        const maleCountsByDate = maleDates.reduce((acc, date) => {\r\n          acc[date] = (acc[date] || 0) + 1;\r\n          return acc;\r\n        }, {});\r\n  \r\n        const femaleCountsByDate = femaleDates.reduce((acc, date) => {\r\n          acc[date] = (acc[date] || 0) + 1;\r\n          return acc;\r\n        }, {});\r\n  \r\n        const labels = Array.from(new Set([...Object.keys(maleCountsByDate), ...Object.keys(femaleCountsByDate)])).sort();\r\n        const maleData = labels.map(label => maleCountsByDate[label] || 0);\r\n        const femaleData = labels.map(label => femaleCountsByDate[label] || 0);\r\n  \r\n        const ctx = this.$refs.userChart.getContext('2d');\r\n  \r\n        this.chart = new Chart(ctx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [\r\n              {\r\n                label: 'Masculino',\r\n                data: maleData,\r\n                backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n                borderColor: 'rgba(54, 162, 235)',\r\n                borderWidth: 1\r\n              },\r\n              {\r\n                label: 'Feminino',\r\n                data: femaleData,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.8)',\r\n                borderColor: 'rgba(255, 99, 132)',\r\n                borderWidth: 1\r\n              }\r\n            ]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n  </script>"],"mappings":";;EAEcA,GAAG,EAAC;AAAW;;uBADzBC,mBAAA,CAEM,cADJC,mBAAA,CAAiC,UAAjCC,UAAiC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}