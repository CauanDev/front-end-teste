{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'CountServicesSplit',\n  props: {\n    users: {\n      type: Array,\n      required: true\n    }\n  },\n  watch: {\n    users() {\n      this.createChart();\n    }\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      // Extrair as datas das revisões e sexo\n      const dates = this.users.map(item => item.date);\n      const sexes = this.users.map(item => item.implementar.sex);\n      console.log(sexes);\n      console.log(this.users);\n      const revisionCountsByDateAndSex = dates.reduce((acc, date, index) => {\n        const sex = sexes[index];\n        if (!acc[date]) {\n          acc[date] = {\n            M: 0,\n            F: 0\n          };\n        }\n        acc[date][sex] = (acc[date][sex] || 0) + 1;\n        return acc;\n      }, {});\n\n      // Preparar os rótulos e os dados para o gráfico\n      const labels = Object.keys(revisionCountsByDateAndSex);\n      const maleData = labels.map(date => revisionCountsByDateAndSex[date].M || 0);\n      const femaleData = labels.map(date => revisionCountsByDateAndSex[date].F || 0);\n\n      // Obter o contexto do canvas para o gráfico\n      const ctx = this.$refs.userChart.getContext('2d');\n      if (this.chart) {\n        // Atualizar os dados do gráfico existente\n        this.chart.data.labels = labels;\n        this.chart.data.datasets[0].data = maleData;\n        this.chart.data.datasets[1].data = femaleData;\n        this.chart.update();\n      } else {\n        // Criar um novo gráfico\n        this.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Revisões Masculinas',\n              data: maleData,\n              backgroundColor: 'rgba(54, 162, 235, 0.8)',\n              borderColor: 'rgba(54, 162, 235)',\n              borderWidth: 2\n            }, {\n              label: 'Revisões Femininas',\n              data: femaleData,\n              backgroundColor: 'rgba(255, 99, 132, 0.8)',\n              borderColor: 'rgba(255, 99, 132)',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","name","props","users","type","Array","required","watch","createChart","mounted","methods","dates","map","item","date","sexes","implementar","sex","console","log","revisionCountsByDateAndSex","reduce","acc","index","M","F","labels","Object","keys","maleData","femaleData","ctx","$refs","userChart","getContext","chart","data","datasets","update","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero"],"sources":["C:\\Users\\Usuário\\Documents\\teste-pratico\\front-end-teste\\src\\components\\chards\\CountServicesSplit.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <canvas ref=\"userChart\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n<script>\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  name: 'CountServicesSplit',\r\n  props: {\r\n    users: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n  },\r\n  watch: {\r\n    users() {\r\n      this.createChart();\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createChart();\r\n    \r\n  },\r\n  methods: {\r\n    createChart() {\r\n      // Extrair as datas das revisões e sexo\r\n      const dates = this.users.map(item => item.date);\r\n      const sexes = this.users.map(item => item.implementar.sex);\r\n      console.log(sexes)\r\n      console.log(this.users)\r\n      const revisionCountsByDateAndSex = dates.reduce((acc, date, index) => {\r\n        const sex = sexes[index];\r\n        if (!acc[date]) {\r\n          acc[date] = { M: 0, F: 0 };\r\n        }\r\n        acc[date][sex] = (acc[date][sex] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Preparar os rótulos e os dados para o gráfico\r\n      const labels = Object.keys(revisionCountsByDateAndSex);\r\n      const maleData = labels.map(date => revisionCountsByDateAndSex[date].M || 0);\r\n      const femaleData = labels.map(date => revisionCountsByDateAndSex[date].F || 0);\r\n\r\n      // Obter o contexto do canvas para o gráfico\r\n      const ctx = this.$refs.userChart.getContext('2d');\r\n\r\n      if (this.chart) {\r\n        // Atualizar os dados do gráfico existente\r\n        this.chart.data.labels = labels;\r\n        this.chart.data.datasets[0].data = maleData;\r\n        this.chart.data.datasets[1].data = femaleData;\r\n        this.chart.update();\r\n      } else {\r\n        // Criar um novo gráfico\r\n        this.chart = new Chart(ctx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [\r\n              {\r\n                label: 'Revisões Masculinas',\r\n                data: maleData,\r\n                backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n                borderColor: 'rgba(54, 162, 235)',\r\n                borderWidth: 2\r\n              },\r\n              {\r\n                label: 'Revisões Femininas',\r\n                data: femaleData,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.8)',\r\n                borderColor: 'rgba(255, 99, 132)',\r\n                borderWidth: 2\r\n              }\r\n            ]\r\n          },\r\n          options: {\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}