{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"userChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_createElementVNode","_hoisted_1"],"sources":["/home/kel/Documents/PHP/Projetos/TesteJunior/front-end-teste/src/components/chards/CountServicesSplit.vue"],"sourcesContent":["<template>\n    <div>\n      <canvas ref=\"userChart\"></canvas>\n    </div>\n  </template>\n  \n<script>\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nexport default {\n  name: 'CountServicesSplit',\n  props: {\n    users: {\n      type: Array,\n      required: true,\n    },\n  },\n  watch: {\n    users() {\n      this.createChart();\n    }\n  },\n  mounted() {\n    this.createChart();\n    \n  },\n  methods: {\n    createChart() {\n      const dates = this.users.map(item => item.date);\n      const sexes = this.users.map(item => item.implementar.sexOwner);\n      console.log(sexes)\n      console.log(this.users)\n      const revisionCountsByDateAndSex = dates.reduce((acc, date, index) => {\n        const sex = sexes[index];\n        if (!acc[date]) {\n          acc[date] = { M: 0, F: 0 };\n        }\n        acc[date][sex] = (acc[date][sex] || 0) + 1;\n        return acc;\n      }, {});\n\n      // Preparar os rótulos e os dados para o gráfico\n      const labels = Object.keys(revisionCountsByDateAndSex);\n      const maleData = labels.map(date => revisionCountsByDateAndSex[date].M || 0);\n      const femaleData = labels.map(date => revisionCountsByDateAndSex[date].F || 0);\n\n      // Obter o contexto do canvas para o gráfico\n      const ctx = this.$refs.userChart.getContext('2d');\n\n      if (this.chart) {\n        // Atualizar os dados do gráfico existente\n        this.chart.data.labels = labels;\n        this.chart.data.datasets[0].data = maleData;\n        this.chart.data.datasets[1].data = femaleData;\n        this.chart.update();\n      } else {\n        // Criar um novo gráfico\n        this.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [\n              {\n                label: 'Revisões Masculinas',\n                data: maleData,\n                backgroundColor: 'rgba(54, 162, 235, 0.8)',\n                borderColor: 'rgba(54, 162, 235)',\n                borderWidth: 2\n              },\n              {\n                label: 'Revisões Femininas',\n                data: femaleData,\n                backgroundColor: 'rgba(255, 99, 132, 0.8)',\n                borderColor: 'rgba(255, 99, 132)',\n                borderWidth: 2\n              }\n            ]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";;EAEcA,GAAG,EAAC;AAAW;;uBADzBC,mBAAA,CAEM,cADJC,mBAAA,CAAiC,UAAjCC,UAAiC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}