{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"userChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_createElementVNode","_hoisted_1"],"sources":["/home/kelvin/Documentos/front-end-teste/src/components/chards/CountChardSplit.vue"],"sourcesContent":["<template>\n    <div>\n      <canvas ref=\"userChart\"></canvas>\n    </div>\n  </template>\n  \n  <script>\n  import { Chart, registerables } from 'chart.js';\n  \n  Chart.register(...registerables);\n  \n  export default {\n    name: 'CountChardSplit',\n    props: {\n      users: {\n        type: Array,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        chart: null,\n      };\n    },\n    watch: {\n      users() {\n        if (this.chart) {\n          this.chart.destroy();\n        }\n        this.createChart();\n      }\n    },\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        const maleUsers = this.users.filter(user => user.implementar.sex === 'M');\n        const femaleUsers = this.users.filter(user => user.implementar.sex === 'F');\n  \n        const maleDates = maleUsers.map(user => user.created_at);\n        const femaleDates = femaleUsers.map(user => user.created_at);\n  \n        const maleCountsByDate = maleDates.reduce((acc, date) => {\n          acc[date] = (acc[date] || 0) + 1;\n          return acc;\n        }, {});\n  \n        const femaleCountsByDate = femaleDates.reduce((acc, date) => {\n          acc[date] = (acc[date] || 0) + 1;\n          return acc;\n        }, {});\n  \n        const labels = Array.from(new Set([...Object.keys(maleCountsByDate), ...Object.keys(femaleCountsByDate)])).sort();\n        const maleData = labels.map(label => maleCountsByDate[label] || 0);\n        const femaleData = labels.map(label => femaleCountsByDate[label] || 0);\n  \n        const ctx = this.$refs.userChart.getContext('2d');\n  \n        this.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [\n              {\n                label: 'Masculino',\n                data: maleData,\n                backgroundColor: 'rgba(54, 162, 235, 0.8)',\n                borderColor: 'rgba(54, 162, 235)',\n                borderWidth: 1\n              },\n              {\n                label: 'Feminino',\n                data: femaleData,\n                backgroundColor: 'rgba(255, 99, 132, 0.8)',\n                borderColor: 'rgba(255, 99, 132)',\n                borderWidth: 1\n              }\n            ]\n          },\n          options: {\n            responsive: true,\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  </script>"],"mappings":";;EAEcA,GAAG,EAAC;AAAW;;uBADzBC,mBAAA,CAEM,cADJC,mBAAA,CAAiC,UAAjCC,UAAiC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}